<?php
// $Id$

/**
 * Implementation of hook_field_info().
 */
function socialfield_field_info() {
  $fields = array(
    'socialfield' => array(
      'label' => t('Social Field'),
      'description' => t('Store an account and associated social data from 3rd parties in the database.'),
    ),
  );

  return $fields;
}

/**
 * Implementation of hook_field_settings().
 */
function social_field_settings($op, $field) {
  switch ($op) {
    case 'database columns':    
      $columns = array(
        // the original value for the social data as entered by the user/editor.
        'value' => array('type' => 'text', 'size' => 'big', 'not null' => TRUE, 'not null' => FALSE, 'sortable' => TRUE),
        // the social id, used by the provider to identify the social account
        'sid' => array('type' => 'varchar', 'length' => 255, 'not null' => TRUE, 'not null' => FALSE, 'sortable' => TRUE),
        // this is the actual provider used; matches up with the specific provider.inc file
        'provider' => array('type' => 'varchar', 'length' => 255, 'not null' => TRUE, 'not null' => FALSE, 'sortable' => TRUE),
        // an array for any extra data
        'data' => array('type' => 'text', 'size' => 'big', 'not null' => TRUE, 'not null' => FALSE, 'sortable' => FALSE),
      );
      return $columns;
  }
}

/**
 * Implementation of hook_field().
 */
function socialfield_field($op, &$node, $field, &$items, $teaser, $page) {
  $return = array();
  switch ($op) {
    // TODO: Nothing to validate at the moment. We need to have different provider api's have a chance to validate.
    case 'validate':
      // foreach ($items as $delta => $item) {
      //   $error_field = $field['multiple'] ? $field['field_name'] .']['. $delta .'][embed' : $field['field_name'];
      //   _emfield_field_validate_id($field, $item, $error_field, $module, $delta);
      // }
      break;

    case 'presave':
      // foreach ($items as $delta => $item) {
      //   $list = _emfield_field_submit_id($field, $item, $module);
      //   $items[$delta]['provider'] = $list['provider'];
      //   $items[$delta]['value'] = $list['value'];
      //   $items[$delta]['data'] = $list['data'];
      // }
      break;

    case 'load':
      // We need to unserialize the 'data' column manually.
      $field_name = $field['field_name'];
      foreach ($items as $delta => $item) {
        $data = (array)unserialize($items[$delta]['data']);
        $items[$delta]['data'] = $data;
        $node->{$field_name}[$delta]['data'] = $data;
      }

      $return[$field_name] = $items;
      break;

    case 'delete':
      break;
  }
  
  if (in_array($op, array('insert', 'update'))) {
    // we need to manually serialize the 'data' array
    foreach ($items as $delta => $item) {
      $items[$delta]['data'] = serialize($items[$delta]['data']);
    }
  }
  return $return;
}

/**
 * Implementation of hook_field_formatter_info().
 */
function socialfield_field_formatter_info() {
  $types = array('socialfield');
  $formats = array(
    'default' => array(
      'label' => t('Default'),
      'field types' => $types,
    ),
  );
  
  // Invoke a hook to let the contrib modules add more formatters,
  // e.g. to format LinkedIn or Twitter as widgets

  return $formats;
}

/**
 * Implementation of hook_field_formatter().
 */
function socialfield_field_formatter($field, $item, $formatter, $node) {
  if (!isset($item['value'])) {
    return '';
  }
  
  switch ($formatter) {
    default:
      return check_plain($item['value']);
  }
}

/**
 * Implementation of hook_widget_info().
 *
 * Here we indicate that the content module will handle
 * the default value and multiple values for these widgets.
 *
 * Callbacks can be omitted if default handing is used.
 * They're included here just so this module can be used
 * as an example for custom modules that might do things
 * differently.
 *
 * Decision: create 3rd parties as widgets, or as providers?
 * widget is CCK logic, providers is something from emfield
 * 
 */
function socialfield_widget_info() {
  return array(
    'socialfield' => array(
      'label' => t('Field with account'),
      'field types' => array('socialfield'),
      'multiple values' => CONTENT_HANDLE_CORE,
      'callbacks' => array(
        'default value' => CONTENT_CALLBACK_DEFAULT,
      ),
    ),
  );
}

/**
 * Implementation of hook_widget_settings().
 */
function socialfield_widget_settings($op, $widget) {
  switch ($op) {
    case 'form':
      // // Make sure to register the new type as supported by this module.
      //  emfield_implement_types(FALSE);
      // 
      //  $form = array();
      //  $options = array();
      //  $providers = emfield_system_list($module);
      //  foreach ($providers as $provider) {
      //    if (variable_get('emfield_'. $module .'_allow_'. $provider->name, TRUE)) {
      //      $info = emfield_include_invoke($module, $provider->name, 'info');
      //      $options[$provider->name] = $info['name'];
      //    }
      //  }
      //  $form['provider_list'] = array(
      //    '#type' => 'fieldset',
      //    '#title' => t('Providers Supported'),
      //    '#description' => t('Select which third party providers you wish to allow for this content type from the list below. If no checkboxes are checked, then all providers will be supported. When a user submits new content, the URL they enter will be matched to the provider, assuming that provider is allowed here.'),
      //    '#collapsible' => TRUE,
      //    '#collapsed' => FALSE,
      //  );
      //  $form['provider_list']['providers'] = array(
      //    '#type' => 'checkboxes',
      //    '#title' => t('Providers'),
      //    '#default_value' => empty($widget['providers']) ? array() : $widget['providers'],
      //    '#options' => $options,
      //  );
      // 
      //  foreach (module_implements('emfield_widget_settings_extra') as $module) {
      //    $form[$module] = module_invoke($module, 'emfield_widget_settings_extra', 'form', $widget);
      //  }

      return $form;

    case 'save':
      // $columns = array('providers'); //, 'helper_module', );
      // foreach (module_implements('emfield_widget_settings_extra') as $module) {
      //   $columns = array_merge($columns, module_invoke($module, 'emfield_widget_settings_extra', 'save', $widget));
      // }

      return $columns;
  }
}

/**
 * Implementation of FAPI hook_elements().
 *
 * Any FAPI callbacks needed for individual widgets can be declared here,
 * and the element will be passed to those callbacks for processing.
 *
 * Drupal will automatically theme the element using a theme with
 * the same name as the hook_elements key.
 *
 * Includes a regex to check for valid values as an additional parameter
 * the validator can use. The regex can be overridden if necessary.
 */
function socialfield_elements() {
  return array(
    'socialfield' => array(
      '#input' => TRUE,
      '#columns' => array('value'), 
      '#delta' => 0,
      // '#process' => array('socialfield_process'),
    ),
  );
}


/**
 * Implementation of hook_widget().
 *
 * Attach a single form element to the form. It will be built out and
 * validated in the callback(s) listed in hook_elements. We build it
 * out in the callbacks rather than here in hook_widget so it can be
 * plugged into any module that can provide it with valid
 * $field information.
 *
 * Content module will set the weight, field name and delta values
 * for each form element. This is a change from earlier CCK versions
 * where the widget managed its own multiple values.
 *
 * If there are multiple values for this field, the content module will
 * call this function as many times as needed.
 *
 * @param $form
 *   the entire form array, $form['#node'] holds node information
 * @param $form_state
 *   the form_state, $form_state['values'][$field['field_name']]
 *   holds the field's form values.
 * @param $field
 *   the field array
 * @param $items
 *   array of default values for this field
 * @param $delta
 *   the order of this item in the array of subelements (0, 1, 2, etc)
 *
 * @return
 *   the form item for a single element for this field
 */
function socialfield_widget(&$form, &$form_state, $field, $items, $delta = 0) {
  $element = array(
    '#type' => $field['widget']['type'],
    '#default_value' => isset($items[$delta]) ? $items[$delta] : NULL,
  );
  return $element;
}

/**
 * Process an individual element.
 *
 * Build the form element. When creating a form using FAPI #process,
 * note that $element['#value'] is already set.
 *
 * The $fields array is in $form['#field_info'][$element['#field_name']].
 */
function socialfield_process($element, $edit, $form_state, $form) {
  // $field_name = $element['#field_name'];
  // $field = $form['#field_info'][$field_name];
  // $field_key  = $element['#columns'][0];
  // 
  // $value = isset($element['#value'][$field_key]) ? $element['#value'][$field_key] : '';
  // $value = isset($field['decimal']) ? str_replace('.', $field['decimal'], $value) : $value;
  // $element[$field_key] = array(
  //   '#type' => 'textfield',
  //   '#default_value' => $value,
  //   // Need to allow a slightly larger size that the field length to allow
  //   // for some configurations where all characters won't fit in input field.
  //   '#size' => isset($field['precision']) ? $field['precision'] + 2 : 12,
  //   '#maxlength' => isset($field['precision']) ? $field['precision'] : 10,
  //   '#attributes' => array('class' => 'number'),
  //   // The following values were set by the content module and need
  //   // to be passed down to the nested element.
  //   '#title' => $element['#title'],
  //   '#description' => $element['#description'],
  //   '#required' => $element['#required'],
  //   '#field_name' => $element['#field_name'],
  //   '#type_name' => $element['#type_name'],
  //   '#delta' => $element['#delta'],
  //   '#columns' => $element['#columns'],
  // );
  // 
  // $prefixes = array();
  // $suffixes = array();
  // 
  // // Make sure we don't wipe out element validation added elsewhere.
  // if (empty($element['#element_validate'])) {
  //   $element['#element_validate'] = array();
  // }
  // if (!empty($field['prefix'])) {
  //   $prefixes = explode('|', $field['prefix']);
  //   $element[$field_key]['#field_prefix'] = content_filter_xss(array_pop($prefixes));
  // }
  // if (!empty($field['suffix'])) {
  //   $suffixes = explode('|', $field['suffix']);
  //   $element[$field_key]['#field_suffix'] = content_filter_xss(array_pop($suffixes));
  // }
  // switch ($field['type']) {
  //   case 'number_float':
  //     $element['#element_validate'][] = 'number_float_validate';
  //     break;
  //   case 'number_integer':
  //     $element['#element_validate'][] = 'number_integer_validate';
  //     break;
  //   case 'number_decimal':
  //     $element['#element_validate'][] = 'number_decimal_validate';
  //     $element['#decimal'] = isset($field['decimal']) ? $field['decimal'] : '.';
  //     $element['#precision'] = isset($field['precision']) ? $field['precision'] : 10;
  //     $element['#scale'] = isset($field['scale']) ? $field['scale'] : 2;
  //     break;
  // }
  // 
  // // Used so that hook_field('validate') knows where to flag an error.
  // $element['_error_element'] = array(
  //   '#type' => 'value',
  //   '#value' => implode('][', array_merge($element['#parents'], array($field_key))),
  // );
  // 
  $element = array();
  return $element;
}